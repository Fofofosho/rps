#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rps-test:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.Server(app);
var io = require('socket.io')(server);
var sCount = 0;

/**
 * Create the DB, FIX THIS!
 */
var theDB = [];

//TODO: Need a messaging system for each user to check and see what 
//  incoming/pending actions they have. Only remove their message when
//  they respond to the user that sent the notification.

/**
 * On socket connection.
 */
io.on( 'connection', function (socket) {
  console.log('SERVER: Sockets connected ' + ++sCount);
  socket.emit('news', { hello: socket.id });
  socket.on('my other event', function (data) {
    console.log('SERVER: ');
    console.log(data);
  });

  socket.on('serverMsg', function (data) {
    console.log('SERVER received: ');
    console.log(data);
    // console.log('forwarding::');
    // console.log(data);
    // io.sockets.in('all').emit('allmsg', { message: data });
  });

  socket.on('theDBInsert', function (data) {
    console.log('theDBInsert action:');
    console.log(data);

    theDB.push(data);

    socket.emit('test', theDB);
  });

  socket.on('theDBDelete', function (data) {
    console.log('theDBDelete action:');
    console.log(data);

    theDB.filter( function (val, index, array) {
      if ( val.user != data.user )
        return;
    });
  });

  socket.on('theDBSearch', function (data) {
    var targetData;
    var sourceData;
    var found = false;

    console.log('theDBSearch action:');
    console.log(data);

    if ( theDB == null )
    {
      console.log('DB empty');
      return false;
    }

    theDB.forEach( function (target, iIndex, iArray) {
      if ( target.user == data.friendStr )
      {
        found = true;
        targetData = target;
      }
    });

    //Send to the two parties
    theDB.forEach( function (source, jIndex, jArray) {
      if ( source.user == data.user )
      {
        sourceData = source;
      }
    });

    console.log('Searching Complete!!');

    if ( found )
    {
      console.log('FRIEND');
      console.log(targetData);
      console.log('ME');
      console.log(sourceData);

      //Send to target
      io.to(targetData.recentSockId).emit('theDBSearchResult', sourceData);

      //Send to source
      io.to(sourceData.recentSockId).emit('theDBSearchResult', targetData);
    }
    else
    {
      //send to source that user does not exist
      console.log('ERROR: Searching for \'' + data.friendStr + '\' not found');
      console.log(sourceData);
      io.to(sourceData.recentSockId).emit('theDBSearchResult', {'user': null});
    }

  });

  socket.on( 'disconnect', function(err) {
    --sCount;
    console.log('SERVER: client disconnect ' + sCount);
  });

  //Connection error
  socket.on('error', function(err) {
    if ( err )
    {
      console.log('ERrrrrr connection');
      console.log(err);
    }
  });

  //TODO: Not sure if this is correct, 'error' might be correct
  //Object error
  // socket.on('Object', function(err) {
  //   if ( err )
  //   {
  //     console.log('ERrrrrr object');
  //     console.log(err);
  //   }
  // });

  //A way for a master socket to talk to all players.
  socket.join('all');

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
