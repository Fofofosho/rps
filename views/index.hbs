<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>Ba-Bush-Ka</title>
		<meta name="description" content="ba bush ka babushka">
		<meta name="author" content="jacob debenedetto forrest townsend">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<link rel='shortcut icon' type='image/x-icon' href='img/favicon.ico' />
	</head>
	<body>
		<div class="wrapper noselect"></div>
		<script>
            var myName;
            var password;
            var friendName;

            var socket;

            //TODO: need a way to accept look at incoming requests/played actions from friends
            //  todo cont. need an icon to show that user is being waited on by friend

            function initSocket(bool) {
                console.log('>> ==============initSocket================');
                if ( bool === true )
                {  
                  if ( socket == undefined )
                    socket = io();
                  else
                    console.log('WOOOOOOAH');
                }
                else
                {
                  socket = io.connect('http://localhost:3000',{'forceNew':true});
                }
                console.log(socket);

                console.log('<< ==============initSocket================');
            }

            function sendAction( targetStr, action ) {
                console.log('>> ==============sendAction================');

                var msg =
                    {
                        sourceStr:  myName,
                        destStr:    targetStr,
                        actionId:   action
                    };

                console.log('CLIENT SENDING:vvv');
                console.log(msg);

                socket.emit('serverMsg', {id: socket.id, message: msg});

                console.log('<< ==============sendAction================');
            }

			//prepopulate relationships with data
			var matches  = [new Match(5,"doppl3r", -1), new Match(12,"dooley",1),
                            new Match(3,"ted555",-1), new Match(-3,"octodad",-1),
                            new Match(18,"roboto",2), new Match(3,"fillistake",-1),
                            new Match(-2,"richard4",-1), new Match(99,"dougle",-1)];
            
            $(document).ready(function() { 
                initLogin();
				
			});
			$(window).load(function() {  });
            
			function Match(score, target, action){ //int, string id, -1=undefined, 0=rock, 1=paper, 2=scissors
				this.score=score;
				this.target=target;
				this.action=action;
			}
			
            function initLogin(){
                //Create the socket
                initSocket(true);

                //TEST
                socket.on('test', function (data) {
                    console.log('test event:');
                    console.log(data);
                });
 
                //append the login forms
                $(".wrapper").append('<form class="form" id="form1" autocomplete="off">'+
                    '<input class="fade" type="text" name="myName" placeholder="name">'+
                    '<input class="fade" type="password" name="password" placeholder="password">'+
                    '<input class="fade" type="submit" value="login"></form>');
                $("#form1").submit(function(e){ validateLogin(); return false; });
            }
            
            function initSearch(){
                //append the search options
                $(".wrapper").append('<form class="form" id="form2">'+
                    '<input class="fade" type="text" name="name" placeholder="friend">'+
                    '<input class="fade" type="submit" value="search"></form>');

                //Init search event listener
                socket.on('theDBSearchResult', function (data) {
                    //Create new instance with friend
                    console.log('DB SEARCH RESULT');

                    if (data.user == null)
                    {
                        alert('no matches found');
                        return false;
                    }

                    friendName = data.user;
                    console.log('SERVER FOUND FRIEND:');
                    console.log(data);

                    //Create the match
                    var matchedFriend = new Match(0, friendName, -1);
                    matches.push(matchedFriend);

                    //Refresh the html
                    refreshMatches();
                    
                });

                $("#form2").submit(function(e){ search($('#form2').find('input[name="name"]').val()); return false; });
            }
            
            function initLogout(){
                //append the logout button
                $(".wrapper").append('<form class="form" id="form3">'+
                    '<input class="fade" type="submit" value="logout"></form>');

                $("#form3").submit(function(e){ logout(); return false; });
            }
            
            function validateLogin(){
                //check the server for appropriate name and password
                if (true){
                    myName = $('#form1').find('input[name="myName"]').val();
                    password = $('#form1').find('input[name="password"]').val();
                    console.log("name: " + myName);
                    console.log("password: " + password);

                    //TODO: This is wrong. fix this temporary db insert here, should be after validate. Also should not be reinserting name but updating recentSockId.
                    //TODO: If user exists, update recentSockId to be socket.id
                    socket.emit('theDBInsert', {user: myName, recentSockId: socket.id} );

                    $(".wrapper").empty(); //empty the main window;
                    refreshMatches();
                }
            }
            
            function search(name){
                friendName = name;

                if (friendName.length <= 0) 
                    $('#form2').find('input[name="name"]').focus();
                else 
                {
                    console.log("searched name: "+friendName);
                    socket.emit('theDBSearch', {user: myName, friendStr: friendName});
                }
            }
            
            function logout(){
                //TODO: this is temporary, removes current user from theDB
                socket.emit('theDBDelete', {user: myName});

                $(".wrapper").empty(); //empty the main window;
                initLogin();
                alert('you have successfully logged out');
            }
            
			function selectAction(e){
				if (!$(e).closest('.match').hasClass('waiting')){
					//do stuff
					$(e).toggleClass("selected");
					$(e).closest('.match').addClass('waiting');

					//send the id to somewhere...I chose to send it to console
                    var targetId = $(e).closest('.match').find('.target').text();
					console.log('targetID:'+ targetId);
                    var action = $(e).closest('.match').find('span').index(e);
					console.log('action:'+ action);

                    sendAction( targetId, action );

                    //save the matches to the local system
                    matches[$(e).closest('.match').index()].action = $(e).closest('.match').find('span').index(e);
				}
			}
            
            function refreshMatches(){
                //append relationships into HTML code
				for (i = 0; i < matches.length; i++){
					$(".wrapper").append('<div class="match fade'+(matches[i].action > -1 ? " waiting" : "")+'">'+
						'<div class="score">'+matches[i].score+'</div>'+
						'<div class="target">'+matches[i].target+'</div>'+
						'<div class="actions"><span class="action1 fade" onclick="selectAction(this);"></span></div>'+
						'<div class="actions"><span class="action2 fade" onclick="selectAction(this);"></span></div>'+
						'<div class="actions"><span class="action3 fade" onclick="selectAction(this);"></span></div></div>');
                    $(".match").eq(i).find(".action"+(matches[i].action+1)).toggleClass("selected"); //toggle class action value
				}
                initSearch(); //append search option
                initLogout(); //append logout field
                
            }

            /**
             * SOCKET EVENTS
             */


			function isMobile(){ return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ? true:false; }
		</script>
	</body>
</html>